// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package mecabpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// MeCabClient is the client API for MeCab service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MeCabClient interface {
	Parse(ctx context.Context, in *ParseRequest, opts ...grpc.CallOption) (*ParseResponse, error)
}

type meCabClient struct {
	cc grpc.ClientConnInterface
}

func NewMeCabClient(cc grpc.ClientConnInterface) MeCabClient {
	return &meCabClient{cc}
}

func (c *meCabClient) Parse(ctx context.Context, in *ParseRequest, opts ...grpc.CallOption) (*ParseResponse, error) {
	out := new(ParseResponse)
	err := c.cc.Invoke(ctx, "/MeCab/Parse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MeCabServer is the server API for MeCab service.
// All implementations must embed UnimplementedMeCabServer
// for forward compatibility
type MeCabServer interface {
	Parse(context.Context, *ParseRequest) (*ParseResponse, error)
	mustEmbedUnimplementedMeCabServer()
}

// UnimplementedMeCabServer must be embedded to have forward compatible implementations.
type UnimplementedMeCabServer struct {
}

func (UnimplementedMeCabServer) Parse(context.Context, *ParseRequest) (*ParseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Parse not implemented")
}
func (UnimplementedMeCabServer) mustEmbedUnimplementedMeCabServer() {}

// UnsafeMeCabServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MeCabServer will
// result in compilation errors.
type UnsafeMeCabServer interface {
	mustEmbedUnimplementedMeCabServer()
}

func RegisterMeCabServer(s grpc.ServiceRegistrar, srv MeCabServer) {
	s.RegisterService(&_MeCab_serviceDesc, srv)
}

func _MeCab_Parse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeCabServer).Parse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MeCab/Parse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeCabServer).Parse(ctx, req.(*ParseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MeCab_serviceDesc = grpc.ServiceDesc{
	ServiceName: "MeCab",
	HandlerType: (*MeCabServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Parse",
			Handler:    _MeCab_Parse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mecabpb/mecab.proto",
}
